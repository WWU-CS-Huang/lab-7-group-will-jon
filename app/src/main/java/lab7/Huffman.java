/*
 * This source file was generated by the Gradle 'init' task
 */
package lab7;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.HashMap;


public class Huffman {

    public static void main(String[] args){
      for (String input : args){
          File file = new File(input);
          encoding(file);
          Node<Character> node = new Node<Character>('c');

      }
    


        
    }

  public static HashMap<Character, Node<Character>> encoding(File file){
    HashMap<Character, Node<Character>> map = new HashMap<Character, Node<Character>>();
    try{

        Scanner reader = new Scanner(file);
        String current;
        while (reader.hasNextLine()){
          current = reader.nextLine();
            for (char c : current.toCharArray()){
              if (map.containsKey(c)) map.get(c).count++;
                
              else {
                Node<Character> temp = new Node<Character>(c);
                map.put(c, temp);
              }
            }
        }
    }
    catch (FileNotFoundException e){
      e.printStackTrace();

    }
    return map;

  }
  public static Node<Character> buildTree(HashMap<Character, Node<Character>> map){
    
    // while (map.size() > 1) { 
        
    //     Node first = null;
    //     Node second = null;
    //     for (Node<Character> node : map.values()) {
    //         if (first == null) {
    //             first = node;
    //         }else if(second == null){
    //             second = node;
    //         }else if(node.count < first.count){
    //             if(first.count < second.count){
    //                 second = first;
    //             }
    //             first = node;
    //         }else if(node.count < second.count){
    //             if(first.count > second.count){
    //                 first = second;
    //             }
    //             second = node;
    //         }
    //     }
    //     Node parent = new Node<Character>(null, first, second);
    //     map.remove(first.value);
    //     map.remove(second.value);
    //     map.put((char)11, parent);
    // }
    // return;
  }

//   private class Tree{
//     public Tree(String input){

//     }
//   }
  private static class Node<T>{
    public int count;
    public Node<T> left; 
    public Node<T> right;
    public T value;

    public Node(T value){
      this.value = value;
      count = 0;
    }
    public Node(T value, int count){
      this.value = value;
      this.count = count;
    }

    public Node(T value, Node<T> left, Node<T> right){
      this.value = value;
      this.left = left;
      this.right = right;
      count = 0;

    }

  }
}
