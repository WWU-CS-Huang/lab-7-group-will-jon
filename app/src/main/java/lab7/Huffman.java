/*
 * This source file was generated by the Gradle 'init' task
 */
package lab7;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.HashMap;


public class Huffman {
    private static Node head;
    public static void main(String[] args){
      
      for (String input : args){
          File file = new File(input);
          // System.out.println(file.getAbsolutePath());
          Heap<Node<Character>, Integer> heap = getCount(file);
          head = buildTree(heap);
          Node<Character> node = new Node<Character>('c');
          System.out.println(input);
          System.out.print(decode(encode(input)));

      }
    


        
    }
    public static String encode(String input){
        String output = "";
        for(int i = 0; i < input.length(); i++){
            input.charAt(i);
        }
        return output;
    }

  public static Heap<Node<Character>, Integer> getCount(File file){
    Heap< Node<Character>, Integer> map = new Heap< Node<Character>, Integer>();
    try{

        Scanner reader = new Scanner(file);
        String current;
        while (reader.hasNextLine()){
          current = reader.nextLine();
            for (char c : current.toCharArray()){
                Node<Character> temp = new Node<Character>(c);
              // System.out.println(c + " " + new Node<Character>(c).hashCode());
              if (map.contains(temp)) {
                map.changePriority(temp, map.getPriority(temp) + 1);

            } else
              map.add(new Node<Character>(c), 0);
            }
        }
        reader.close();
    }
    catch (FileNotFoundException e){
      e.printStackTrace();

    }
    return map;

  }
  public static Node<Character> buildTree(Heap<Node<Character>, Integer> heap){
    while(heap.size() > 1){
      Node<Character> left = heap.poll();
      // System.out.println(left.value + " " + left.hashCode());
      Node<Character> right = heap.poll();
      //
      Node<Character> combine = new Node<Character>('\n', left, right, left.count + right.count);
      heap.add(combine, combine.count);
    }
    return heap.poll();
    
  }

  public static String decode(String input){
    String output = "";
    int index = 0;
    while(index < input.length()){
        Node cur = head;
        while(cur.value.equals('\n')){
            if(input.charAt(index) == '0') {
                cur = cur.left;

            }else{
                cur = cur.right;

            }
            index++;
        }
        output = output.concat(cur.value.toString());
        index++;
    }
    return output;
  }

//   private class Tree{
//     public Tree(String input){

//     }
//   }
  private static class Node<T>{
    public int count;
    public Node<T> left; 
    public Node<T> right;
    public T value;

    public Node(T value){
      this.value = value;
      count = 0;
    }
    public Node(T value, int count){
      this.value = value;
      this.count = count;
    }

    public Node(T value, Node<T> left, Node<T> right){
      this.value = value;
      this.left = left;
      this.right = right;
      count = 0;

    }

    public Node(T value, Node<T> left, Node<T> right, int count){
      this.value = value;
      this.left = left;
      this.right = right;
      this.count = count;

    }
    @Override
    public int hashCode(){
      return value.hashCode();
    }

  }
}
